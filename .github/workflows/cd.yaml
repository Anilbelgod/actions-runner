name: |-
  CD 
  ```

on:
  workflow_call:
    inputs:
      version:
        description: "Version to deploy"
        required: true
        type: string
      image:
        description: "Docker Image to deploy"
        required: true
        type: string
      image-tag:
        description: "Docker Image tag to deploy"
        required: true
        type: string
      organization:
        description: "Repository owner organization (ex. acme for repo acme/example)"
        required: true
        type: string
      repository:
        description: "Repository name (ex. example for repo acme/example)"
        required: true
        type: string
      app-name:
        description: "Application name usually repository name"
        required: true
        type: string
      config-app-name:
        description: "The application name for configuration purposes"
        required: false
        type: string
      service-account-role-arn:
        description: The Kubernetes service account role ARN
        required: false
        type: string
      vanity-domain:
        description: The vanity domain
        required: false
        type: string
      secondary-vanity-domain:
        description: The secondary vanity domain
        required: false
        type: string        
      environment:
        description: "Environment name deploy to"
        type: string
        required: true
      synchronously:
        type: boolean
        description: "Wait until ArgoCD successfully apply the changes"
        default: false
      tenant:
        description: "The tenant for the deployment"
        required: true
        type: string
      toolchain:
        description: "Toolchain ('helm', 'helmfile')"
        required: false
        default: "helmfile"
        type: string
      helm-file-path:
        description: "The path where lives the helmfile or helm chart."
        required: false
        default: "./deploy/helmfile.yaml"
        type: string
      helm-values-file:
        type: string
        description: Helm values file
        default: ''
        required: false
      dynamic-helm-values:
        type: string
        description: Dynamic Helm values
        default: ''
        required: false
      import-secrets:
        type: boolean
        description: "Whether to import secrets"
        default: true
        required: false
      deployment-check-retry-count:
        type: string
        description: 'Check retry count (for synchronously mode)'
        required: false
      deployment-check-retry-interval:
        type: string
        description: 'Check retry interval (in seconds) (for synchronously mode)'
        required: false
      deployment-check-app-id:
        type: string
        description: 'The Github App ID used for authentication when checking for deployment status'
        required: false
      deployment-check-app-installation-id:
        type: string
        description: 'The Github App Instance ID used for authentication when checking for deployment status'
        required: false
    secrets:
      secret-outputs-passphrase:
        description: "Passphrase to encrypt/decrypt secret outputs with gpg. For more information [read](https://github.com/cloudposse/github-action-secret-outputs)"
        required: true
      github-private-actions-pat:
        description: "Github PAT allow to pull private repos"
        required: true
      one-password-service-account-token:
        description: "The 1Password service acount token"
        required: true
      deployment-check-app-private-key:
        description: 'The Github App private key used for authentication when checking for deployment status'
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ["self-hosted"]
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      # - uses: cloudposse/github-action-secret-outputs@0.1.2
      #   id: image
      #   with:
      #     secret: ${{ secrets.secret-outputs-passphrase }}
      #     op: decode
      #     in: ${{ inputs.image }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine the application name for configuration purposes
        id: config-app-name
        uses: cloudposse/github-action-yaml-config-query@0.1.2
        with:
          query: .${{ inputs.config-app-name == '' }}
          config: |
            true:
              value: ${{ inputs.app-name }}
            false:
              value: ${{ inputs.config-app-name }}

      # - name: Environment Info
      #   uses: carecloud/github-action-interface-environment@main
      #   id: environment
      #   with:
      #     implementation_repository: carecloud/actions-private
      #     implementation_path: argocd-environments
      #     implementation_ref: main
      #     implementation_github_pat: ${{ secrets.github-private-actions-pat }}
      #     environment: ${{ inputs.environment }}
      #     namespace: ${{ inputs.environment }}
      #     repository: ${{ inputs.repository }}
      #     config-app-name: ${{ steps.config-app-name.outputs.value }}
      #     tenant: ${{ inputs.tenant }}

      - name: Import secrets into Secret Manager from 1Password
        uses: ./
        id: import-secrets
        with:
          one-password-service-account-token: ${{ secrets.ONE_PASSWORD_SERVICE_ACCOUNT_TOKEN }}
          one-password-primary-vault: cch-cicd-test 
          one-password-primary-item: server  
          one-password-primary-field: env
          import-secrets: true 


      # - name: Create synthetic domain
      #   uses: carecloud/github-action-create-synthetic-domain@main
      #   id: synthetic-domain
      #   with:
      #     app-name: ${{ inputs.app-name }}
      #     platform-ssm-path: ${{ steps.environment.outputs.platform-ssm-path }}

      - name: Define Helm values file path
        if: ${{ inputs.toolchain == 'helmfile' }}
        id: deploy-helm-values-file-path
        shell: bash
        run: |
          echo '::set-output name=deploy::${{ runner.temp }}/deploy-helm-values.yaml'

      - name: Setup yq
        if: ${{ inputs.toolchain == 'helmfile' }}
        uses: dcarbone/install-yq-action@v1.1.0
        with:
          version: v4.35.1
          download-compressed: true
          force: true

      - name: Create deploy Helm values file
        if: ${{ inputs.toolchain == 'helmfile' }}
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          contents: ${{ steps.import-secrets.outputs.envar-keys }}
          write-mode: overwrite

      - name: Update deploy Helm values file
        if: ${{ inputs.toolchain == 'helmfile' }}
        shell: bash
        run: |
          yq -i eval '{"envar_keys": .}' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i eval '{"deployment": .}' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.aws_region = "${{ steps.environment.outputs.region }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.app_name = "${{ inputs.app-name }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.config_app_name = "${{ steps.config-app-name.outputs.value }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.synthetic_domain = "${{ steps.synthetic-domain.outputs.service-domain }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.vanity_domain = "${{ inputs.vanity-domain }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.secondary_vanity_domain = "${{ inputs.secondary-vanity-domain }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.branch_or_tag_name = "${{ inputs.ref }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.service_secret_ssm_path = "${{ steps.environment.outputs.service-secret-ssm-path }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.service_account_role_arn = "${{ inputs.service-account-role-arn }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.namespace = "${{ steps.environment.outputs.namespace }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.version = "${{ inputs.version }}"' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.repo_values = {}' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
          yq -i '.deployment.dynamic_values = {}' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}

      - name: Merge input Helm values file with deploy Helm values file
        if: ${{ inputs.toolchain == 'helmfile' && inputs.helm-values-file != '' }}
        shell: bash
        run: |
          yq -i '.deployment.repo_values |= load("${{ format(inputs.helm-values-file, steps.environment.outputs.name) }}")' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}

      - name: Merge dynamic Helm values with deploy Helm values file
        if: ${{ inputs.toolchain == 'helmfile' && inputs.dynamic-helm-values != '' }}
        shell: bash
        run: |
          export dynamic_values="${{ inputs.dynamic-helm-values }}"

          yq -i '.deployment.dynamic_values |= env(dynamic_values)' ${{ steps.deploy-helm-values-file-path.outputs.deploy }}
      
      - name: Deploy
        uses: carecloud/github-action-deploy-argocd@main
        id: deploy
        with:
          toolchain: ${{ inputs.toolchain }}
          synchronously: ${{ inputs.synchronously }}
          helm-file-path: ${{ inputs.helm-file-path }}
          # Github Syntax of Ternary Operator https://github.com/actions/runner/issues/409#issuecomment-752775072
          # ${{ condition && 'ifTrue' || 'ifFalse'  }}
          helm-values-file: ${{ inputs.toolchain == 'helmfile' && steps.deploy-helm-values-file-path.outputs.deploy || format(inputs.helm-values-file, steps.environment.outputs.name) }}
          repository: ${{ inputs.organization }}/${{ inputs.repository }}
          app-name: ${{ inputs.app-name }}
          service-config-ssm-path: ${{ steps.environment.outputs.service-config-ssm-path }}
          platform-ssm-path: ${{ steps.environment.outputs.platform-ssm-path }}
          aws-region: ${{ steps.environment.outputs.region }}
          cluster: ${{ steps.environment.outputs.cluster }}
          environment: ${{ steps.environment.outputs.name }}
          namespace: ${{ steps.environment.outputs.namespace }}
          image: ${{ steps.image.outputs.out }}
          image-tag: ${{ inputs.image-tag }}
          operation: deploy
          github-pat: ${{ secrets.github-private-actions-pat }}
          ref: ${{ github.sha }}
          debug: true
          deployment-check-retry-count: ${{ inputs.deployment-check-retry-count }}
          deployment-check-retry-interval: ${{ inputs.deployment-check-retry-interval }}
          deployment-check-app-id: ${{ inputs.deployment-check-app-id }}
          deployment-check-app-installation-id: ${{ inputs.deployment-check-app-installation-id }}
          deployment-check-app-private-key: ${{ secrets.deployment-check-app-private-key }}